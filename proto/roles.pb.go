// Code generated by protoc-gen-go. DO NOT EDIT.
// source: roles.proto

package chremoas_roles

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Role struct {
	Type      string `protobuf:"bytes,1,opt,name=Type" json:"Type,omitempty"`
	ShortName string `protobuf:"bytes,2,opt,name=ShortName" json:"ShortName,omitempty"`
	// Discord
	Name        string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Color       int32  `protobuf:"varint,4,opt,name=Color" json:"Color,omitempty"`
	Hoist       bool   `protobuf:"varint,5,opt,name=Hoist" json:"Hoist,omitempty"`
	Position    int32  `protobuf:"varint,6,opt,name=Position" json:"Position,omitempty"`
	Permissions int32  `protobuf:"varint,7,opt,name=Permissions" json:"Permissions,omitempty"`
	Managed     bool   `protobuf:"varint,8,opt,name=Managed" json:"Managed,omitempty"`
	Mentionable bool   `protobuf:"varint,9,opt,name=Mentionable" json:"Mentionable,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Role) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Role) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *Role) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Role) GetColor() int32 {
	if m != nil {
		return m.Color
	}
	return 0
}

func (m *Role) GetHoist() bool {
	if m != nil {
		return m.Hoist
	}
	return false
}

func (m *Role) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *Role) GetPermissions() int32 {
	if m != nil {
		return m.Permissions
	}
	return 0
}

func (m *Role) GetManaged() bool {
	if m != nil {
		return m.Managed
	}
	return false
}

func (m *Role) GetMentionable() bool {
	if m != nil {
		return m.Mentionable
	}
	return false
}

type RemoveRoleRequest struct {
	Name string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
}

func (m *RemoveRoleRequest) Reset()                    { *m = RemoveRoleRequest{} }
func (m *RemoveRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveRoleRequest) ProtoMessage()               {}
func (*RemoveRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *RemoveRoleRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetRolesResponse struct {
	Roles []*Role `protobuf:"bytes,1,rep,name=Roles" json:"Roles,omitempty"`
}

func (m *GetRolesResponse) Reset()                    { *m = GetRolesResponse{} }
func (m *GetRolesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRolesResponse) ProtoMessage()               {}
func (*GetRolesResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *GetRolesResponse) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

type SyncRoles struct {
	Source      string `protobuf:"bytes,1,opt,name=Source" json:"Source,omitempty"`
	Destination string `protobuf:"bytes,2,opt,name=Destination" json:"Destination,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
}

func (m *SyncRoles) Reset()                    { *m = SyncRoles{} }
func (m *SyncRoles) String() string            { return proto.CompactTextString(m) }
func (*SyncRoles) ProtoMessage()               {}
func (*SyncRoles) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *SyncRoles) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *SyncRoles) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *SyncRoles) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SyncRolesResponse struct {
	Roles []*SyncRoles `protobuf:"bytes,1,rep,name=Roles" json:"Roles,omitempty"`
}

func (m *SyncRolesResponse) Reset()                    { *m = SyncRolesResponse{} }
func (m *SyncRolesResponse) String() string            { return proto.CompactTextString(m) }
func (*SyncRolesResponse) ProtoMessage()               {}
func (*SyncRolesResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *SyncRolesResponse) GetRoles() []*SyncRoles {
	if m != nil {
		return m.Roles
	}
	return nil
}

func init() {
	proto.RegisterType((*Role)(nil), "chremoas.roles.Role")
	proto.RegisterType((*RemoveRoleRequest)(nil), "chremoas.roles.RemoveRoleRequest")
	proto.RegisterType((*GetRolesResponse)(nil), "chremoas.roles.GetRolesResponse")
	proto.RegisterType((*SyncRoles)(nil), "chremoas.roles.SyncRoles")
	proto.RegisterType((*SyncRolesResponse)(nil), "chremoas.roles.SyncRolesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Roles service

type RolesClient interface {
	AddRole(ctx context.Context, in *Role, opts ...client.CallOption) (*NilMessage, error)
	UpdateRole(ctx context.Context, in *Role, opts ...client.CallOption) (*NilMessage, error)
	RemoveRole(ctx context.Context, in *RemoveRoleRequest, opts ...client.CallOption) (*NilMessage, error)
	GetRoles(ctx context.Context, in *NilMessage, opts ...client.CallOption) (*GetRolesResponse, error)
	SyncRoles(ctx context.Context, in *NilMessage, opts ...client.CallOption) (*SyncRolesResponse, error)
}

type rolesClient struct {
	c           client.Client
	serviceName string
}

func NewRolesClient(serviceName string, c client.Client) RolesClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "chremoas.roles"
	}
	return &rolesClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *rolesClient) AddRole(ctx context.Context, in *Role, opts ...client.CallOption) (*NilMessage, error) {
	req := c.c.NewRequest(c.serviceName, "Roles.AddRole", in)
	out := new(NilMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesClient) UpdateRole(ctx context.Context, in *Role, opts ...client.CallOption) (*NilMessage, error) {
	req := c.c.NewRequest(c.serviceName, "Roles.UpdateRole", in)
	out := new(NilMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesClient) RemoveRole(ctx context.Context, in *RemoveRoleRequest, opts ...client.CallOption) (*NilMessage, error) {
	req := c.c.NewRequest(c.serviceName, "Roles.RemoveRole", in)
	out := new(NilMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesClient) GetRoles(ctx context.Context, in *NilMessage, opts ...client.CallOption) (*GetRolesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Roles.GetRoles", in)
	out := new(GetRolesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesClient) SyncRoles(ctx context.Context, in *NilMessage, opts ...client.CallOption) (*SyncRolesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Roles.SyncRoles", in)
	out := new(SyncRolesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Roles service

type RolesHandler interface {
	AddRole(context.Context, *Role, *NilMessage) error
	UpdateRole(context.Context, *Role, *NilMessage) error
	RemoveRole(context.Context, *RemoveRoleRequest, *NilMessage) error
	GetRoles(context.Context, *NilMessage, *GetRolesResponse) error
	SyncRoles(context.Context, *NilMessage, *SyncRolesResponse) error
}

func RegisterRolesHandler(s server.Server, hdlr RolesHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Roles{hdlr}, opts...))
}

type Roles struct {
	RolesHandler
}

func (h *Roles) AddRole(ctx context.Context, in *Role, out *NilMessage) error {
	return h.RolesHandler.AddRole(ctx, in, out)
}

func (h *Roles) UpdateRole(ctx context.Context, in *Role, out *NilMessage) error {
	return h.RolesHandler.UpdateRole(ctx, in, out)
}

func (h *Roles) RemoveRole(ctx context.Context, in *RemoveRoleRequest, out *NilMessage) error {
	return h.RolesHandler.RemoveRole(ctx, in, out)
}

func (h *Roles) GetRoles(ctx context.Context, in *NilMessage, out *GetRolesResponse) error {
	return h.RolesHandler.GetRoles(ctx, in, out)
}

func (h *Roles) SyncRoles(ctx context.Context, in *NilMessage, out *SyncRolesResponse) error {
	return h.RolesHandler.SyncRoles(ctx, in, out)
}

func init() { proto.RegisterFile("roles.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x41, 0x8f, 0x93, 0x50,
	0x10, 0x5e, 0x76, 0x4b, 0x0b, 0x53, 0x63, 0xdc, 0x97, 0x8d, 0x79, 0x12, 0x0f, 0x2c, 0x17, 0x89,
	0x07, 0x4c, 0xd6, 0xb3, 0x46, 0xe3, 0x26, 0x1a, 0x23, 0x9b, 0x0d, 0xd5, 0x83, 0xc7, 0x57, 0x98,
	0xb4, 0x24, 0xf0, 0x06, 0x79, 0xaf, 0x26, 0xfd, 0xd9, 0xfa, 0x0b, 0x0c, 0x8f, 0x16, 0x28, 0xd6,
	0x9a, 0xec, 0x8d, 0xef, 0xfb, 0x66, 0x3e, 0x66, 0xe6, 0x03, 0x98, 0xd7, 0x54, 0xa0, 0x8a, 0xaa,
	0x9a, 0x34, 0xb1, 0xc7, 0xe9, 0xba, 0xc6, 0x92, 0x84, 0x8a, 0x0c, 0xeb, 0x3d, 0x4a, 0xa9, 0x2c,
	0x49, 0xb6, 0x6a, 0xf0, 0xdb, 0x82, 0x49, 0x42, 0x05, 0x32, 0x06, 0x93, 0xaf, 0xdb, 0x0a, 0xb9,
	0xe5, 0x5b, 0xa1, 0x9b, 0x98, 0x67, 0xf6, 0x1c, 0xdc, 0xc5, 0x9a, 0x6a, 0x7d, 0x27, 0x4a, 0xe4,
	0xe7, 0x46, 0xe8, 0x89, 0xa6, 0xc3, 0x08, 0x17, 0x6d, 0x87, 0xe1, 0xae, 0xc0, 0xfe, 0x40, 0x05,
	0xd5, 0x7c, 0xe2, 0x5b, 0xa1, 0x9d, 0xb4, 0xa0, 0x61, 0x3f, 0x51, 0xae, 0x34, 0xb7, 0x7d, 0x2b,
	0x74, 0x92, 0x16, 0x30, 0x0f, 0x9c, 0x7b, 0x52, 0xb9, 0xce, 0x49, 0xf2, 0xa9, 0x29, 0xef, 0x30,
	0xf3, 0x61, 0x7e, 0x8f, 0x75, 0x99, 0x2b, 0x95, 0x93, 0x54, 0x7c, 0x66, 0xe4, 0x21, 0xc5, 0x38,
	0xcc, 0x62, 0x21, 0xc5, 0x0a, 0x33, 0xee, 0x18, 0xd7, 0x3d, 0x6c, 0x7a, 0x63, 0x94, 0x8d, 0x8d,
	0x58, 0x16, 0xc8, 0x5d, 0xa3, 0x0e, 0xa9, 0xe0, 0x05, 0x5c, 0x26, 0x58, 0xd2, 0x4f, 0x6c, 0x36,
	0x4f, 0xf0, 0xc7, 0x06, 0x95, 0xee, 0xd6, 0xb1, 0xfa, 0x75, 0x82, 0xb7, 0xf0, 0xe4, 0x23, 0xea,
	0xa6, 0x4a, 0x25, 0xa8, 0x2a, 0x92, 0x0a, 0xd9, 0x4b, 0xb0, 0x0d, 0xc1, 0x2d, 0xff, 0x22, 0x9c,
	0xdf, 0x5c, 0x45, 0x87, 0xf7, 0x8d, 0x8c, 0x67, 0x5b, 0x12, 0x7c, 0x07, 0x77, 0xb1, 0x95, 0xa9,
	0x01, 0xec, 0x29, 0x4c, 0x17, 0xb4, 0xa9, 0xd3, 0xfd, 0x2b, 0x76, 0xa8, 0x99, 0xf7, 0x16, 0x95,
	0xce, 0xa5, 0x30, 0xa7, 0x68, 0xef, 0x3c, 0xa4, 0x8e, 0x5d, 0x3a, 0xb8, 0x85, 0xcb, 0xce, 0xba,
	0x9b, 0xed, 0xd5, 0xe1, 0x6c, 0xcf, 0xc6, 0xb3, 0xf5, 0x1d, 0x6d, 0xdd, 0xcd, 0xaf, 0xf3, 0x5d,
	0x07, 0x7b, 0x03, 0xb3, 0xf7, 0x59, 0x66, 0x3e, 0x85, 0xa3, 0x2b, 0x79, 0xde, 0x98, 0xbd, 0xcb,
	0x8b, 0x18, 0x95, 0x12, 0x2b, 0x0c, 0xce, 0xd8, 0x3b, 0x80, 0x6f, 0x55, 0x26, 0x34, 0x3e, 0xd8,
	0x21, 0x06, 0xe8, 0x43, 0x61, 0xd7, 0x7f, 0x39, 0x8c, 0x03, 0xfb, 0x8f, 0xdd, 0x67, 0x70, 0xf6,
	0xd1, 0xb1, 0x13, 0x95, 0x9e, 0x3f, 0xd6, 0xc6, 0x81, 0x07, 0x67, 0xec, 0xcb, 0x30, 0xc6, 0x53,
	0x66, 0xd7, 0xff, 0x3e, 0x78, 0xe7, 0xb6, 0x9c, 0x9a, 0x3f, 0xef, 0xf5, 0x9f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xa2, 0xa8, 0xc4, 0xa3, 0xa6, 0x03, 0x00, 0x00,
}
