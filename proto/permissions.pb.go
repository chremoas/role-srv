// Code generated by protoc-gen-go. DO NOT EDIT.
// source: permissions.proto

/*
Package chremoas_role is a generated protocol buffer package.

It is generated from these files:
	permissions.proto
	roles.proto

It has these top-level messages:
	PermissionsRequest
	PermissionsResponse
	PerformResponse
	DiscordRole
	AddRoleRequest
	AddRoleResponse
	RemoveRoleRequest
	RemoveRoleResponse
	GetRolesRequest
	GetRolesResponse
	SyncRoles
	SyncRolesRequest
	SyncRolesResponse
*/
package chremoas_role

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PermissionsRequest struct {
	User            string   `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	PermissionsList []string `protobuf:"bytes,2,rep,name=PermissionsList" json:"PermissionsList,omitempty"`
}

func (m *PermissionsRequest) Reset()                    { *m = PermissionsRequest{} }
func (m *PermissionsRequest) String() string            { return proto.CompactTextString(m) }
func (*PermissionsRequest) ProtoMessage()               {}
func (*PermissionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PermissionsRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *PermissionsRequest) GetPermissionsList() []string {
	if m != nil {
		return m.PermissionsList
	}
	return nil
}

type PermissionsResponse struct {
	PermissionsList []string `protobuf:"bytes,1,rep,name=PermissionsList" json:"PermissionsList,omitempty"`
}

func (m *PermissionsResponse) Reset()                    { *m = PermissionsResponse{} }
func (m *PermissionsResponse) String() string            { return proto.CompactTextString(m) }
func (*PermissionsResponse) ProtoMessage()               {}
func (*PermissionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PermissionsResponse) GetPermissionsList() []string {
	if m != nil {
		return m.PermissionsList
	}
	return nil
}

type PerformResponse struct {
	CanPerform bool `protobuf:"varint,1,opt,name=CanPerform" json:"CanPerform,omitempty"`
}

func (m *PerformResponse) Reset()                    { *m = PerformResponse{} }
func (m *PerformResponse) String() string            { return proto.CompactTextString(m) }
func (*PerformResponse) ProtoMessage()               {}
func (*PerformResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PerformResponse) GetCanPerform() bool {
	if m != nil {
		return m.CanPerform
	}
	return false
}

func init() {
	proto.RegisterType((*PermissionsRequest)(nil), "chremoas.role.PermissionsRequest")
	proto.RegisterType((*PermissionsResponse)(nil), "chremoas.role.PermissionsResponse")
	proto.RegisterType((*PerformResponse)(nil), "chremoas.role.PerformResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Permissions service

type PermissionsClient interface {
	Perform(ctx context.Context, in *PermissionsRequest, opts ...client.CallOption) (*PerformResponse, error)
	AddPermisssions(ctx context.Context, in *PermissionsRequest, opts ...client.CallOption) (*PermissionsResponse, error)
	RemovePermissions(ctx context.Context, in *PermissionsRequest, opts ...client.CallOption) (*PermissionsResponse, error)
	GetPermissions(ctx context.Context, in *PermissionsRequest, opts ...client.CallOption) (*PermissionsResponse, error)
}

type permissionsClient struct {
	c           client.Client
	serviceName string
}

func NewPermissionsClient(serviceName string, c client.Client) PermissionsClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "chremoas.role"
	}
	return &permissionsClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *permissionsClient) Perform(ctx context.Context, in *PermissionsRequest, opts ...client.CallOption) (*PerformResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Permissions.Perform", in)
	out := new(PerformResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) AddPermisssions(ctx context.Context, in *PermissionsRequest, opts ...client.CallOption) (*PermissionsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Permissions.AddPermisssions", in)
	out := new(PermissionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) RemovePermissions(ctx context.Context, in *PermissionsRequest, opts ...client.CallOption) (*PermissionsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Permissions.RemovePermissions", in)
	out := new(PermissionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsClient) GetPermissions(ctx context.Context, in *PermissionsRequest, opts ...client.CallOption) (*PermissionsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Permissions.GetPermissions", in)
	out := new(PermissionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Permissions service

type PermissionsHandler interface {
	Perform(context.Context, *PermissionsRequest, *PerformResponse) error
	AddPermisssions(context.Context, *PermissionsRequest, *PermissionsResponse) error
	RemovePermissions(context.Context, *PermissionsRequest, *PermissionsResponse) error
	GetPermissions(context.Context, *PermissionsRequest, *PermissionsResponse) error
}

func RegisterPermissionsHandler(s server.Server, hdlr PermissionsHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Permissions{hdlr}, opts...))
}

type Permissions struct {
	PermissionsHandler
}

func (h *Permissions) Perform(ctx context.Context, in *PermissionsRequest, out *PerformResponse) error {
	return h.PermissionsHandler.Perform(ctx, in, out)
}

func (h *Permissions) AddPermisssions(ctx context.Context, in *PermissionsRequest, out *PermissionsResponse) error {
	return h.PermissionsHandler.AddPermisssions(ctx, in, out)
}

func (h *Permissions) RemovePermissions(ctx context.Context, in *PermissionsRequest, out *PermissionsResponse) error {
	return h.PermissionsHandler.RemovePermissions(ctx, in, out)
}

func (h *Permissions) GetPermissions(ctx context.Context, in *PermissionsRequest, out *PermissionsResponse) error {
	return h.PermissionsHandler.GetPermissions(ctx, in, out)
}

func init() { proto.RegisterFile("permissions.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x48, 0x2d, 0xca,
	0xcd, 0x2c, 0x2e, 0xce, 0xcc, 0xcf, 0x2b, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4d,
	0xce, 0x28, 0x4a, 0xcd, 0xcd, 0x4f, 0x2c, 0xd6, 0x2b, 0xca, 0xcf, 0x49, 0x55, 0x0a, 0xe2, 0x12,
	0x0a, 0x40, 0xa8, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0x09, 0x2d,
	0x4e, 0x2d, 0x92, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0x34, 0xb8, 0xf8, 0x91,
	0x54, 0xfa, 0x64, 0x16, 0x97, 0x48, 0x30, 0x29, 0x30, 0x6b, 0x70, 0x06, 0xa1, 0x0b, 0x2b, 0xd9,
	0x73, 0x09, 0xa3, 0x98, 0x59, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x8a, 0xcd, 0x00, 0x46, 0xec, 0x06,
	0x18, 0x82, 0x55, 0xa6, 0xe5, 0x17, 0xe5, 0xc2, 0x35, 0xcb, 0x71, 0x71, 0x39, 0x27, 0xe6, 0x41,
	0x45, 0xc1, 0xee, 0xe2, 0x08, 0x42, 0x12, 0x31, 0xfa, 0xc4, 0xc4, 0xc5, 0x8d, 0x64, 0x8c, 0x90,
	0x1f, 0x17, 0x3b, 0x54, 0x4a, 0x48, 0x51, 0x0f, 0xc5, 0xcb, 0x7a, 0x98, 0xfe, 0x95, 0x92, 0xc3,
	0x54, 0x82, 0x6c, 0xbb, 0x12, 0x83, 0x50, 0x14, 0x17, 0xbf, 0x63, 0x4a, 0x0a, 0x54, 0x2b, 0xc4,
	0x0a, 0x22, 0xcc, 0x55, 0xc2, 0xa7, 0x04, 0x6e, 0x76, 0x0c, 0x97, 0x60, 0x50, 0x6a, 0x6e, 0x7e,
	0x59, 0x2a, 0xb2, 0x07, 0xa8, 0x66, 0x7a, 0x24, 0x17, 0x9f, 0x7b, 0x6a, 0x09, 0x2d, 0x8c, 0x4e,
	0x62, 0x03, 0x27, 0x29, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xce, 0xca, 0x9f, 0x67,
	0x02, 0x00, 0x00,
}
