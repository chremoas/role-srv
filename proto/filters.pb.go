// Code generated by protoc-gen-go. DO NOT EDIT.
// source: filters.proto

package chremoas_roles

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FilterList struct {
	FilterList []*Filter `protobuf:"bytes,1,rep,name=FilterList" json:"FilterList,omitempty"`
}

func (m *FilterList) Reset()                    { *m = FilterList{} }
func (m *FilterList) String() string            { return proto.CompactTextString(m) }
func (*FilterList) ProtoMessage()               {}
func (*FilterList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *FilterList) GetFilterList() []*Filter {
	if m != nil {
		return m.FilterList
	}
	return nil
}

type Filter struct {
	Name        string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=Description" json:"Description,omitempty"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Filter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Filter) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Members struct {
	Name   []string `protobuf:"bytes,1,rep,name=Name" json:"Name,omitempty"`
	Filter string   `protobuf:"bytes,2,opt,name=Filter" json:"Filter,omitempty"`
}

func (m *Members) Reset()                    { *m = Members{} }
func (m *Members) String() string            { return proto.CompactTextString(m) }
func (*Members) ProtoMessage()               {}
func (*Members) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Members) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Members) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type MemberList struct {
	Members []string `protobuf:"bytes,1,rep,name=Members" json:"Members,omitempty"`
}

func (m *MemberList) Reset()                    { *m = MemberList{} }
func (m *MemberList) String() string            { return proto.CompactTextString(m) }
func (*MemberList) ProtoMessage()               {}
func (*MemberList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *MemberList) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

func init() {
	proto.RegisterType((*FilterList)(nil), "chremoas.roles.FilterList")
	proto.RegisterType((*Filter)(nil), "chremoas.roles.Filter")
	proto.RegisterType((*Members)(nil), "chremoas.roles.Members")
	proto.RegisterType((*MemberList)(nil), "chremoas.roles.MemberList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Filters service

type FiltersClient interface {
	GetFilters(ctx context.Context, in *NilMessage, opts ...client.CallOption) (*FilterList, error)
	AddFilter(ctx context.Context, in *Filter, opts ...client.CallOption) (*NilMessage, error)
	RemoveFilter(ctx context.Context, in *Filter, opts ...client.CallOption) (*NilMessage, error)
	GetMembers(ctx context.Context, in *Filter, opts ...client.CallOption) (*MemberList, error)
	AddMembers(ctx context.Context, in *Members, opts ...client.CallOption) (*NilMessage, error)
	RemoveMembers(ctx context.Context, in *Members, opts ...client.CallOption) (*NilMessage, error)
}

type filtersClient struct {
	c           client.Client
	serviceName string
}

func NewFiltersClient(serviceName string, c client.Client) FiltersClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "chremoas.roles"
	}
	return &filtersClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *filtersClient) GetFilters(ctx context.Context, in *NilMessage, opts ...client.CallOption) (*FilterList, error) {
	req := c.c.NewRequest(c.serviceName, "Filters.GetFilters", in)
	out := new(FilterList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filtersClient) AddFilter(ctx context.Context, in *Filter, opts ...client.CallOption) (*NilMessage, error) {
	req := c.c.NewRequest(c.serviceName, "Filters.AddFilter", in)
	out := new(NilMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filtersClient) RemoveFilter(ctx context.Context, in *Filter, opts ...client.CallOption) (*NilMessage, error) {
	req := c.c.NewRequest(c.serviceName, "Filters.RemoveFilter", in)
	out := new(NilMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filtersClient) GetMembers(ctx context.Context, in *Filter, opts ...client.CallOption) (*MemberList, error) {
	req := c.c.NewRequest(c.serviceName, "Filters.GetMembers", in)
	out := new(MemberList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filtersClient) AddMembers(ctx context.Context, in *Members, opts ...client.CallOption) (*NilMessage, error) {
	req := c.c.NewRequest(c.serviceName, "Filters.AddMembers", in)
	out := new(NilMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filtersClient) RemoveMembers(ctx context.Context, in *Members, opts ...client.CallOption) (*NilMessage, error) {
	req := c.c.NewRequest(c.serviceName, "Filters.RemoveMembers", in)
	out := new(NilMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Filters service

type FiltersHandler interface {
	GetFilters(context.Context, *NilMessage, *FilterList) error
	AddFilter(context.Context, *Filter, *NilMessage) error
	RemoveFilter(context.Context, *Filter, *NilMessage) error
	GetMembers(context.Context, *Filter, *MemberList) error
	AddMembers(context.Context, *Members, *NilMessage) error
	RemoveMembers(context.Context, *Members, *NilMessage) error
}

func RegisterFiltersHandler(s server.Server, hdlr FiltersHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Filters{hdlr}, opts...))
}

type Filters struct {
	FiltersHandler
}

func (h *Filters) GetFilters(ctx context.Context, in *NilMessage, out *FilterList) error {
	return h.FiltersHandler.GetFilters(ctx, in, out)
}

func (h *Filters) AddFilter(ctx context.Context, in *Filter, out *NilMessage) error {
	return h.FiltersHandler.AddFilter(ctx, in, out)
}

func (h *Filters) RemoveFilter(ctx context.Context, in *Filter, out *NilMessage) error {
	return h.FiltersHandler.RemoveFilter(ctx, in, out)
}

func (h *Filters) GetMembers(ctx context.Context, in *Filter, out *MemberList) error {
	return h.FiltersHandler.GetMembers(ctx, in, out)
}

func (h *Filters) AddMembers(ctx context.Context, in *Members, out *NilMessage) error {
	return h.FiltersHandler.AddMembers(ctx, in, out)
}

func (h *Filters) RemoveMembers(ctx context.Context, in *Members, out *NilMessage) error {
	return h.FiltersHandler.RemoveMembers(ctx, in, out)
}

func init() { proto.RegisterFile("filters.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x3f, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0x13, 0x82, 0x5a, 0xf5, 0xda, 0x32, 0x78, 0x28, 0x51, 0xa6, 0xc8, 0x03, 0xea, 0x94,
	0xa1, 0x08, 0x46, 0xa4, 0x40, 0x14, 0x16, 0xda, 0x21, 0xdf, 0x20, 0x4d, 0x0e, 0xb0, 0x14, 0xd7,
	0x95, 0xcf, 0xe2, 0x4b, 0xf1, 0x25, 0x91, 0xec, 0xb8, 0x04, 0x54, 0xfe, 0x48, 0xdd, 0xf2, 0x72,
	0xef, 0xfd, 0x74, 0xef, 0x64, 0x98, 0x3f, 0x8b, 0xce, 0xa0, 0xa6, 0x6c, 0xaf, 0x95, 0x51, 0xec,
	0xa2, 0x79, 0xd5, 0x28, 0x55, 0x4d, 0x99, 0x56, 0x1d, 0x52, 0x32, 0x6b, 0x94, 0x94, 0x6a, 0xe7,
	0xa6, 0xbc, 0x00, 0x28, 0xad, 0xfd, 0x49, 0x90, 0x61, 0xb7, 0x43, 0x15, 0x87, 0x69, 0xb4, 0x9c,
	0xae, 0x16, 0xd9, 0x57, 0x40, 0xe6, 0x1c, 0xd5, 0xc0, 0xc9, 0xef, 0x60, 0xe4, 0x14, 0x63, 0x70,
	0xbe, 0xa9, 0x25, 0xc6, 0x61, 0x1a, 0x2e, 0x27, 0x95, 0xfd, 0x66, 0x29, 0x4c, 0x0b, 0xa4, 0x46,
	0x8b, 0xbd, 0x11, 0x6a, 0x17, 0x9f, 0xd9, 0xd1, 0xf0, 0x17, 0xbf, 0x81, 0xf1, 0x1a, 0xe5, 0x16,
	0x35, 0x0d, 0x00, 0xd1, 0x01, 0xb0, 0xf0, 0xf8, 0x3e, 0xdb, 0x2b, 0x7e, 0x05, 0xe0, 0x62, 0x76,
	0xf9, 0xf8, 0x00, 0xe9, 0xc3, 0x5e, 0xae, 0xde, 0x23, 0x18, 0xbb, 0x08, 0xb1, 0x12, 0xe0, 0x11,
	0x8d, 0x57, 0xc9, 0xf7, 0x72, 0x1b, 0xd1, 0xad, 0x91, 0xa8, 0x7e, 0xc1, 0x24, 0x39, 0x5e, 0xdc,
	0x16, 0x0e, 0x58, 0x0e, 0x93, 0xbc, 0x6d, 0xfb, 0xd6, 0x3f, 0xdc, 0x28, 0xf9, 0x05, 0xcf, 0x03,
	0x56, 0xc0, 0xac, 0x42, 0xa9, 0xde, 0xf0, 0x24, 0xca, 0xbd, 0x2d, 0xe4, 0xcf, 0xf7, 0x6f, 0xc6,
	0xe7, 0xe1, 0x78, 0xc0, 0x1e, 0x00, 0xf2, 0xb6, 0xf5, 0x8c, 0xcb, 0xe3, 0x5e, 0xfa, 0x63, 0x91,
	0x12, 0xe6, 0xae, 0xce, 0x69, 0x9c, 0xed, 0xc8, 0xbe, 0xcc, 0xeb, 0x8f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xb9, 0xcf, 0x35, 0x82, 0xc8, 0x02, 0x00, 0x00,
}
