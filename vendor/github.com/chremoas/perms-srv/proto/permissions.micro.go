// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: permissions.proto

/*
Package chremoas_perms is a generated protocol buffer package.

It is generated from these files:
	permissions.proto

It has these top-level messages:
	NilRequest
	UsersRequest
	UsersResponse
	PermissionsRequest
	Permission
	PermissionUser
	PermissionsResponse
	PerformResponse
*/
package chremoas_perms

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Permissions service

type PermissionsService interface {
	Perform(ctx context.Context, in *PermissionsRequest, opts ...client.CallOption) (*PerformResponse, error)
	AddPermission(ctx context.Context, in *Permission, opts ...client.CallOption) (*Permission, error)
	AddPermissionUser(ctx context.Context, in *PermissionUser, opts ...client.CallOption) (*PermissionUser, error)
	RemovePermission(ctx context.Context, in *Permission, opts ...client.CallOption) (*Permission, error)
	RemovePermissionUser(ctx context.Context, in *PermissionUser, opts ...client.CallOption) (*PermissionUser, error)
	ListPermissions(ctx context.Context, in *NilRequest, opts ...client.CallOption) (*PermissionsResponse, error)
	ListPermissionUsers(ctx context.Context, in *UsersRequest, opts ...client.CallOption) (*UsersResponse, error)
	ListUserPermissions(ctx context.Context, in *PermissionUser, opts ...client.CallOption) (*PermissionsResponse, error)
}

type permissionsService struct {
	c    client.Client
	name string
}

func NewPermissionsService(name string, c client.Client) PermissionsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "chremoas.perms"
	}
	return &permissionsService{
		c:    c,
		name: name,
	}
}

func (c *permissionsService) Perform(ctx context.Context, in *PermissionsRequest, opts ...client.CallOption) (*PerformResponse, error) {
	req := c.c.NewRequest(c.name, "Permissions.Perform", in)
	out := new(PerformResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsService) AddPermission(ctx context.Context, in *Permission, opts ...client.CallOption) (*Permission, error) {
	req := c.c.NewRequest(c.name, "Permissions.AddPermission", in)
	out := new(Permission)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsService) AddPermissionUser(ctx context.Context, in *PermissionUser, opts ...client.CallOption) (*PermissionUser, error) {
	req := c.c.NewRequest(c.name, "Permissions.AddPermissionUser", in)
	out := new(PermissionUser)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsService) RemovePermission(ctx context.Context, in *Permission, opts ...client.CallOption) (*Permission, error) {
	req := c.c.NewRequest(c.name, "Permissions.RemovePermission", in)
	out := new(Permission)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsService) RemovePermissionUser(ctx context.Context, in *PermissionUser, opts ...client.CallOption) (*PermissionUser, error) {
	req := c.c.NewRequest(c.name, "Permissions.RemovePermissionUser", in)
	out := new(PermissionUser)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsService) ListPermissions(ctx context.Context, in *NilRequest, opts ...client.CallOption) (*PermissionsResponse, error) {
	req := c.c.NewRequest(c.name, "Permissions.ListPermissions", in)
	out := new(PermissionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsService) ListPermissionUsers(ctx context.Context, in *UsersRequest, opts ...client.CallOption) (*UsersResponse, error) {
	req := c.c.NewRequest(c.name, "Permissions.ListPermissionUsers", in)
	out := new(UsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionsService) ListUserPermissions(ctx context.Context, in *PermissionUser, opts ...client.CallOption) (*PermissionsResponse, error) {
	req := c.c.NewRequest(c.name, "Permissions.ListUserPermissions", in)
	out := new(PermissionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Permissions service

type PermissionsHandler interface {
	Perform(context.Context, *PermissionsRequest, *PerformResponse) error
	AddPermission(context.Context, *Permission, *Permission) error
	AddPermissionUser(context.Context, *PermissionUser, *PermissionUser) error
	RemovePermission(context.Context, *Permission, *Permission) error
	RemovePermissionUser(context.Context, *PermissionUser, *PermissionUser) error
	ListPermissions(context.Context, *NilRequest, *PermissionsResponse) error
	ListPermissionUsers(context.Context, *UsersRequest, *UsersResponse) error
	ListUserPermissions(context.Context, *PermissionUser, *PermissionsResponse) error
}

func RegisterPermissionsHandler(s server.Server, hdlr PermissionsHandler, opts ...server.HandlerOption) {
	type permissions interface {
		Perform(ctx context.Context, in *PermissionsRequest, out *PerformResponse) error
		AddPermission(ctx context.Context, in *Permission, out *Permission) error
		AddPermissionUser(ctx context.Context, in *PermissionUser, out *PermissionUser) error
		RemovePermission(ctx context.Context, in *Permission, out *Permission) error
		RemovePermissionUser(ctx context.Context, in *PermissionUser, out *PermissionUser) error
		ListPermissions(ctx context.Context, in *NilRequest, out *PermissionsResponse) error
		ListPermissionUsers(ctx context.Context, in *UsersRequest, out *UsersResponse) error
		ListUserPermissions(ctx context.Context, in *PermissionUser, out *PermissionsResponse) error
	}
	type Permissions struct {
		permissions
	}
	h := &permissionsHandler{hdlr}
	s.Handle(s.NewHandler(&Permissions{h}, opts...))
}

type permissionsHandler struct {
	PermissionsHandler
}

func (h *permissionsHandler) Perform(ctx context.Context, in *PermissionsRequest, out *PerformResponse) error {
	return h.PermissionsHandler.Perform(ctx, in, out)
}

func (h *permissionsHandler) AddPermission(ctx context.Context, in *Permission, out *Permission) error {
	return h.PermissionsHandler.AddPermission(ctx, in, out)
}

func (h *permissionsHandler) AddPermissionUser(ctx context.Context, in *PermissionUser, out *PermissionUser) error {
	return h.PermissionsHandler.AddPermissionUser(ctx, in, out)
}

func (h *permissionsHandler) RemovePermission(ctx context.Context, in *Permission, out *Permission) error {
	return h.PermissionsHandler.RemovePermission(ctx, in, out)
}

func (h *permissionsHandler) RemovePermissionUser(ctx context.Context, in *PermissionUser, out *PermissionUser) error {
	return h.PermissionsHandler.RemovePermissionUser(ctx, in, out)
}

func (h *permissionsHandler) ListPermissions(ctx context.Context, in *NilRequest, out *PermissionsResponse) error {
	return h.PermissionsHandler.ListPermissions(ctx, in, out)
}

func (h *permissionsHandler) ListPermissionUsers(ctx context.Context, in *UsersRequest, out *UsersResponse) error {
	return h.PermissionsHandler.ListPermissionUsers(ctx, in, out)
}

func (h *permissionsHandler) ListUserPermissions(ctx context.Context, in *PermissionUser, out *PermissionsResponse) error {
	return h.PermissionsHandler.ListUserPermissions(ctx, in, out)
}
